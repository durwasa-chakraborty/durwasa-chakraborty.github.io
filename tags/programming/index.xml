<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Anachronistic Monk</title>
    <link>https://durwasa-chakraborty.github.io/tags/programming/</link>
    <description>Recent content in programming on Anachronistic Monk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Jun 2024 12:54:54 +0530</lastBuildDate>
    <atom:link href="https://durwasa-chakraborty.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How B&#43; Trees Optimize SQL Queries: A Primer</title>
      <link>https://durwasa-chakraborty.github.io/posts/b&#43;-trees-sql-optimization/</link>
      <pubDate>Tue, 11 Jun 2024 12:54:54 +0530</pubDate>
      <guid>https://durwasa-chakraborty.github.io/posts/b&#43;-trees-sql-optimization/</guid>
      <description>Introduction For someone who has taken a course in Computer Science, they have probably come across a B+ tree, often used in the context of databases for storing data. A B+ tree schematically looks like this:
[ 1003 ] / | \ [1001] [1002] [1004 1005] [1007] / | | | [Naruto] [Sasuke] [Sakura Hinata Kakashi] [Itachi] In a B+ tree, the data always lies in the leaf nodes.
However, what are the advantages of using such a structure in a database?</description>
    </item>
    <item>
      <title>Major Mode El</title>
      <link>https://durwasa-chakraborty.github.io/posts/major-mode-el/</link>
      <pubDate>Sat, 06 Jan 2024 18:08:54 +0530</pubDate>
      <guid>https://durwasa-chakraborty.github.io/posts/major-mode-el/</guid>
      <description>Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.
Before you think I&amp;rsquo;m crowning Lisp as God&amp;rsquo;s own language after just one blog stint at a coding exercise, hold your horses. I&amp;rsquo;m not here to bash Object-Oriented Programming or its design patterns. In fact, I believe it&amp;rsquo;s crucial to know these patterns inside out. Only then can you play the game of &amp;lsquo;Design Pattern or Anti-Pattern?</description>
    </item>
  </channel>
</rss>
